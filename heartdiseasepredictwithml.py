# -*- coding: utf-8 -*-
"""HeartDiseasePredictWithML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IX3ITv9CqvgzGQ1hTho1JAE9JiDJn11c

Importing Libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""This is for Data Collection and Processing"""

# The csv data to a Pandas DataFrame
Data_Inf = pd.read_csv('/content/DatasetForHeartDisease.csv')

# first 30 rows of the dataset
Data_Inf.head(30)

# last 30 rows of the dataset
Data_Inf.tail(30)

# Showing the number of rows and columns in the Dataset
Data_Inf.shape

# Getting some info about the Data
Data_Inf.info()

# Cheaking for the missing values
Data_Inf.isnull().sum()

# Statistical measures about the data
Data_Inf.describe()

# Cheaking the distribution of target variables 
Data_Inf['target'].value_counts()

"""1 _  Means Unhealthy Or Flawed Heart

0 _  Means  Healthy Or Flawless Heart

Splitting the Features and the Target
"""

A = Data_Inf.drop(columns='target', axis=1)
B = Data_Inf['target']

print(A)

print(B)

"""Splitting the Data into Training data & Test Data"""

A_train,A_test,B_train,B_Test = train_test_split(A,B,test_size=0.2, stratify=B,random_state=1)

print(A.shape,A_train.shape,A_test.shape)

"""Part Of Model Training

Logistic Regression Portion
"""

Model_Surface = LogisticRegression()

# Training part for LogisticRegression Model_Surface With Training data
Model_Surface.fit(A_train, B_train)

"""Part Of Model Evaluation

This is For Accuracy Score
"""

# Accuracy on Training Data
A_train_predict = Model_Surface.predict(A_train)
Accuracy_Of_Training_Data = accuracy_score(A_train_predict, B_train)

print('Training Data Accuracy : ', Accuracy_Of_Training_Data)

# Accuracy on Test data
A_test_predict = Model_Surface.predict(A_test)
Accuracy_Of_Test_Data = accuracy_score(A_test_predict, B_Test)

print('Test Data Accuracy : ',Accuracy_Of_Test_Data)

"""This is the Predictive System portion"""

Test_Case = (67,1,0,160,286,0,0,108,1,1.5,1,3,2)
# change the Test Case to a numpy array
Test_Case_as_numpy_array = np.asarray(Test_Case)


# reshape the numpy array  

Test_Case_Reshaped = Test_Case_as_numpy_array.reshape(1,-1)

Prophesy_Sequel = Model_Surface.predict(Test_Case_Reshaped)

print(Prophesy_Sequel)

if(Prophesy_Sequel[0]==0):
  print("Heart Is Healthy And Do Not have Any Heart Disease")

else:

    print("Heart Is Unhealthy And Have Heart Disease")